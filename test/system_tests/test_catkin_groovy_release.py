"""
These system tests are testing the release of groovy+ catkin projects.
"""

from __future__ import print_function

import os
import sys

try:
    from vcstools import VcsClient
except ImportError:
    print("vcstools was not detected, please install it.", file=sys.stderr)
    sys.exit(1)

from ..utils import bloom_answer
from ..utils import change_directory
from ..utils import in_temporary_directory
from ..utils import user

# from bloom.git import branch_exists
# from bloom.git import inbranch

# from bloom.util import code


def create_upstream_catkin_groovy_repository(directory=None):
    user('mkdir upstream_repo')
    with change_directory('upstream_repo'):
        user('git init .')
        user('echo "readme stuff" >> README.md')
        user('git add README.md')
        user('git commit -m "Initial commit"')
        user('git checkout -b groovy_devel')
        package_xml = """\
<?xml version="1.0"?>
<package>
  <name>foo</name>
  <version>0.1.0</version>
  <description>A catkin (groovy) ROS package called 'foo'</description>
  <maintainer email="bar@baz.com">Bar</maintainer>
  <license>BSD</license>

  <url type="bugtracker">https://github.com/ros/foo/issues</url>
  <url type="repository">https://github.com/ros/foo</url>

  <build_depend>catkin</build_depend>

  <run_depend>catkin</run_depend>
  <!-- required for messages generated by gencpp -->
  <run_depend>roscpp_core</run_depend>
</package>
    """
        with open('package.xml', 'w+') as f:
            f.write(package_xml)
        user('git add package.xml')
        user('git commit -m "Releasing version 0.1.0"')
        user('git tag 0.1.0 -m "Releasing version 0.1.0"')
        url = 'file://' + os.getcwd()
    return url


def create_release_repo(upstream_url, upstream_type, upstream_branch=''):
    user('mkdir foo_release')
    with change_directory('foo_release'):
        user('git init .')
        cmd = 'git-bloom-config'
        with bloom_answer('y'):
            user(' '.join([cmd, upstream_url, upstream_type, upstream_branch]))
        url = 'file://' + os.getcwd()
    return url


@in_temporary_directory
def test_unary_package_repository(directory=None):
    """
    Release a unary catkin (groovy) package repository.
    """
    directory = directory if directory is not None else os.getcwd()
    # Setup
    upstream_url = create_upstream_catkin_groovy_repository(directory)
    release_url = create_release_repo(upstream_url, 'git', 'groovy_devel')
    release_dir = os.path.join(directory, 'foo_release_clone')
    release_client = VcsClient('git', release_dir)
    release_client.checkout(release_url)
    with change_directory(release_dir):
        # Import upstream
        user('git-bloom-import-upstream --quiet')
        # Generate the vanilla release
        user('git-bloom-generate release --quiet')
