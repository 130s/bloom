#!/usr/bin/env python
from __future__ import print_function

import os
import sys

from bloom.util import track_all_git_branches, execute_command, bailout
from bloom.util import get_current_git_branch, get_last_git_tag, ansi
from bloom.util import get_versions_from_upstream_tag

try:
    from vcstools import VcsClient
except ImportError:
    print("vcstools was not detected, please install it.", file=sys.stderr)
    sys.exit(1)


def execute_bloom_generate_debian(bloom_repo):
    bloom_repo.update('master')

    last_tag = get_last_git_tag()
    if not last_tag:
        bailout("There are no upstream versions imported into this repo."
                "Try:\n\ngit bloom-import-upstream")
    print("The latest upstream tag in the release repo is"
          "{0}{1}{2}".format(ansi('boldon'), last_tag, ansi('reset')))

    major, minor, patch = get_versions_from_upstream_tag(last_tag)
    version_str = '.'.join([major, minor, patch])
    print("Upstream version is: {0}{1}{2}"
          "".format(ansi('boldon'), version_str, ansi('reset')))

    from bloom.generate_debian import main, parse_options
    main(parse_options())


def main():
    track_all_git_branches()

    if execute_command('git show-ref refs/heads/bloom') != 0:
        bailout("This does not appear to be a bloom release repo. "
                "Please initialize it first using:\n\n"
                "git bloom-set-upstream <UPSTREAM_VCS_URL> <VCS_TYPE>")

    current_branch = get_current_git_branch()
    bloom_repo = VcsClient('git', os.getcwd())
    try:
        execute_bloom_generate_debian()
    finally:
        if current_branch:
            bloom_repo.update(current_branch)

if __name__ == '__main__':
    main()
